{"ast":null,"code":"import _toConsumableArray from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\Dev\\\\NFT\\\\nft-marketplace-solution\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from \"react\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from \"@metamask/detect-provider\";\nimport KryptoBird from '../abis/KryptoBird.json';\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn } from 'mdb-react-ui-kit';\nimport './App.css';\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    value: function () {\n      var _componentDidMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentDidMount() {\n        return _componentDidMount.apply(this, arguments);\n      }\n\n      return componentDidMount;\n    }() // first up is to detect ethereum provider\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var provider;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // const provider = await detectEthereumProvider();\n                provider = new Web3(new Web3.providers.HttpProvider(\"http://localhost:7545\")); // modern browsers\n                // if there is a provider then lets\n                // lets log that it's working and access the window from the doc\n                // to set Web3 to the provider \n\n                if (provider) {\n                  console.log('ethereum wallet is connected');\n                  window.ethereum = new Web3(provider);\n                } else {\n                  // no ethereum provider\n                  console.log('no ethereum wallet detected');\n                }\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, totalSupply, i, _KryptoBird;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.ethereum;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                this.setState({\n                  account: accounts[0]\n                }); // create a constant js variable networkId which \n                //is set to blockchain network id \n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = KryptoBird.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                // EXERCISE TIME!!!! :)\n                // 1. create a var abi set to the Kryptobird abi\n                // 2. create a var address set to networkData address\n                // 3. create a var contract which grabs a \n                //new instance of web3 eth Contract  \n                // 4. log in the console the var contract successfully - GOOD LUCK!!!!\n                abi = KryptoBird.abi;\n                address = networkData.address;\n                contract = new web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                }); // call the total supply of our Krypto Birdz \n                // grab the total supply on the front end and log the results\n                // go to web3 doc and read up on methods and call \n\n                _context3.next = 16;\n                return contract.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply: totalSupply\n                }); // set up an array to keep track of tokens \n                // load KryptoBirdz\n\n                i = 1;\n\n              case 19:\n                if (!(i <= totalSupply)) {\n                  _context3.next = 27;\n                  break;\n                }\n\n                _context3.next = 22;\n                return contract.methods.kryptoBirdz(i - 1).call();\n\n              case 22:\n                _KryptoBird = _context3.sent;\n                // how should we handle the state on the front end? \n                this.setState({\n                  kryptoBirdz: [].concat(_toConsumableArray(this.state.kryptoBirdz), [_KryptoBird])\n                });\n\n              case 24:\n                i++;\n                _context3.next = 19;\n                break;\n\n              case 27:\n                _context3.next = 30;\n                break;\n\n              case 29:\n                window.alert('Smart contract not deployed');\n\n              case 30:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() // with minting we are sending information and we need to specify the account\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.mint = function (kryptoBird) {\n      _this.state.contract.methods.mint(kryptoBird).send({\n        from: _this.state.account\n      }).once('receipt', function (receipt) {\n        _this.setState({\n          kryptoBirdz: [].concat(_toConsumableArray(_this.state.kryptoBirdz), [KryptoBird])\n        });\n      });\n    };\n\n    _this.state = {\n      account: '',\n      contract: null,\n      totalSupply: 0,\n      kryptoBirdz: []\n    };\n    return _this;\n  } // BUILDING THE MINTING FORM\n  // 1. Create a text input with a place holder \n  //'add file location'\n  // 2. Create another input button with the type submit\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"container-filled\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, console.log(this.state.kryptoBirdz), React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top \\r bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"navbar-brand col-sm-3 col-md-3 \\r mr-0\",\n        style: {\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Krypto Birdz NFTs (Non Fungible Tokens)\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nowrap\\r d-none d-sm-none d-sm-block\\r \",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, this.state.account)))), React.createElement(\"div\", {\n        className: \"container-fluid mt-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        style: {\n          opacity: '0.8'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        style: {\n          color: 'black'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"KryptoBirdz - NFT Marketplace\"), React.createElement(\"form\", {\n        onSubmit: function onSubmit(event) {\n          event.preventDefault();\n          var kryptoBird = _this2.kryptoBird.value;\n\n          _this2.mint(kryptoBird);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Add a file location\",\n        className: \"form-control mb-1\",\n        ref: function ref(input) {\n          return _this2.kryptoBird = input;\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        style: {\n          margin: '6px'\n        },\n        type: \"submit\",\n        className: \"btn btn-primary btn-black\",\n        value: \"MINT\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }))))), React.createElement(\"hr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"row textCenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, this.state.kryptoBirdz.map(function (kryptoBird, key) {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154\n          },\n          __self: this\n        }, React.createElement(MDBCard, {\n          className: \"token img\",\n          style: {\n            maxWidth: '22rem'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(MDBCardImage, {\n          src: kryptoBird,\n          position: \"top\",\n          height: \"250rem\",\n          style: {\n            marginRight: '4px'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }), React.createElement(MDBCardBody, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(MDBCardTitle, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, \" KryptoBirdz \"), React.createElement(MDBCardText, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \" The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain. \"), React.createElement(MDBBtn, {\n          href: kryptoBird,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, \"Download\")))));\n      }))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:\\Dev\\NFT\\nft-marketplace-solution\\src\\components\\App.js"],"names":["React","Component","Web3","detectEthereumProvider","KryptoBird","MDBCard","MDBCardBody","MDBCardTitle","MDBCardText","MDBCardImage","MDBBtn","App","loadWeb3","loadBlockchainData","provider","providers","HttpProvider","console","log","window","ethereum","web3","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","contract","Contract","methods","totalSupply","call","i","kryptoBirdz","state","alert","props","mint","kryptoBird","send","from","once","receipt","color","opacity","event","preventDefault","value","input","margin","map","key","maxWidth","marginRight"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport Web3 from \"web3\";\r\nimport detectEthereumProvider from \"@metamask/detect-provider\";\r\nimport KryptoBird from '../abis/KryptoBird.json'\r\nimport {MDBCard, MDBCardBody, MDBCardTitle, MDBCardText, MDBCardImage, MDBBtn} from 'mdb-react-ui-kit';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n    async componentDidMount() {\r\n        await this.loadWeb3();\r\n        await this.loadBlockchainData();\r\n    }\r\n\r\n    // first up is to detect ethereum provider\r\n    async loadWeb3() {\r\n       // const provider = await detectEthereumProvider();\r\n        const provider = new Web3(new Web3.providers.HttpProvider(\"http://localhost:7545\"));\r\n        // modern browsers\r\n        // if there is a provider then lets\r\n        // lets log that it's working and access the window from the doc\r\n        // to set Web3 to the provider \r\n        \r\n        if(provider) {\r\n            console.log('ethereum wallet is connected')\r\n            window.ethereum = new Web3(provider)\r\n        } else {\r\n            // no ethereum provider\r\n            console.log('no ethereum wallet detected')\r\n        }\r\n    }\r\n\r\n    async loadBlockchainData() {\r\n        const web3 = window.ethereum\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account:accounts[0]})\r\n\r\n        // create a constant js variable networkId which \r\n        //is set to blockchain network id \r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = KryptoBird.networks[networkId]\r\n         if(networkData) {\r\n             // EXERCISE TIME!!!! :)\r\n             // 1. create a var abi set to the Kryptobird abi\r\n             // 2. create a var address set to networkData address\r\n             // 3. create a var contract which grabs a \r\n             //new instance of web3 eth Contract  \r\n             // 4. log in the console the var contract successfully - GOOD LUCK!!!!\r\n\r\n             const abi = KryptoBird.abi;\r\n             const address = networkData.address; \r\n             const contract = new web3.eth.Contract(abi, address)\r\n             this.setState({contract})\r\n\r\n             // call the total supply of our Krypto Birdz \r\n             // grab the total supply on the front end and log the results\r\n             // go to web3 doc and read up on methods and call \r\n             const totalSupply = await contract.methods.totalSupply().call()\r\n            this.setState({totalSupply})\r\n            // set up an array to keep track of tokens \r\n            // load KryptoBirdz\r\n            for(let i = 1; i <= totalSupply; i++) {\r\n                const KryptoBird = await contract.methods.kryptoBirdz(i - 1).call()\r\n                // how should we handle the state on the front end? \r\n                this.setState({\r\n                    kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n                })\r\n            }\r\n         } else {\r\n             window.alert('Smart contract not deployed')\r\n         }\r\n    }\r\n\r\n    // with minting we are sending information and we need to specify the account\r\n\r\n    mint = (kryptoBird) => {\r\n        this.state.contract.methods.mint(kryptoBird).send({from:this.state.account})\r\n        .once('receipt', (receipt)=> {\r\n            this.setState({\r\n                kryptoBirdz:[...this.state.kryptoBirdz, KryptoBird]\r\n            })\r\n        })  \r\n    }\r\n\r\n    constructor(props) {\r\n         super(props);\r\n         this.state = {\r\n             account: '',\r\n             contract:null,\r\n             totalSupply:0,\r\n             kryptoBirdz:[]\r\n         }\r\n    }\r\n\r\n            // BUILDING THE MINTING FORM\r\n            // 1. Create a text input with a place holder \r\n            //'add file location'\r\n            // 2. Create another input button with the type submit\r\n\r\n    render() {\r\n        return (\r\n            <div className='container-filled'>\r\n                {console.log(this.state.kryptoBirdz)}\r\n                <nav className='navbar navbar-dark fixed-top \r\n                bg-dark flex-md-nowrap p-0 shadow'>\r\n                <div className='navbar-brand col-sm-3 col-md-3 \r\n                mr-0' style={{color:'white'}}>\r\n                      Krypto Birdz NFTs (Non Fungible Tokens)\r\n                </div>\r\n                <ul className='navbar-nav px-3'>\r\n                <li className='nav-item text-nowrap\r\n                d-none d-sm-none d-sm-block\r\n                '>\r\n                <small className='text-white'>\r\n                    {this.state.account}\r\n                </small>\r\n                </li>\r\n                </ul>\r\n                </nav>\r\n\r\n                <div className='container-fluid mt-1'>\r\n                    <div className='row'>\r\n                        <main role='main' \r\n                        className='col-lg-12 d-flex text-center'>\r\n                            <div className='content mr-auto ml-auto'\r\n                            style={{opacity:'0.8'}}>\r\n                                <h1 style={{color:'black'}}>\r\n                                    KryptoBirdz - NFT Marketplace</h1>\r\n                            <form onSubmit={(event)=>{\r\n                                event.preventDefault()\r\n                                const kryptoBird = this.kryptoBird.value\r\n                                this.mint(kryptoBird)\r\n                            }}>\r\n                                <input\r\n                                type='text'\r\n                                placeholder='Add a file location'\r\n                                className='form-control mb-1'\r\n                                ref={(input)=>this.kryptoBird = input}\r\n                                />\r\n                                <input style={{margin:'6px'}}\r\n                                type='submit'\r\n                                className='btn btn-primary btn-black'\r\n                                value='MINT'\r\n                                />\r\n                                </form>\r\n                            </div>\r\n                        </main>\r\n                    </div>\r\n                        <hr></hr>\r\n                        <div className='row textCenter'>\r\n                            {this.state.kryptoBirdz.map((kryptoBird, key)=>{\r\n                                return(\r\n                                    <div >\r\n                                        <div>\r\n                                            <MDBCard className='token img' style={{maxWidth:'22rem'}}>\r\n                                            <MDBCardImage src={kryptoBird}  position='top' height='250rem' style={{marginRight:'4px'}} />\r\n                                            <MDBCardBody>\r\n                                            <MDBCardTitle> KryptoBirdz </MDBCardTitle> \r\n                                            <MDBCardText> The KryptoBirdz are 20 uniquely generated KBirdz from the cyberpunk cloud galaxy Mystopia! There is only one of each bird and each bird can be owned by a single person on the Ethereum blockchain. </MDBCardText>\r\n                                            <MDBBtn href={kryptoBird}>Download</MDBBtn>\r\n                                            </MDBCardBody>\r\n                                            </MDBCard>\r\n                                             </div>\r\n                                    </div>\r\n                                )\r\n                            })} \r\n                        </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}